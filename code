#include<stdio.h>
#include<string.h>
#define SIZE 10
struct stack_a{
    char arr[SIZE];
    int tos;
}st;
int stack_IS_empty(struct stack_a *s){
    if(s->tos==-1)
        return 1;
    else
        return 0;
}
void stack_push(struct stack_a *s, int x){
    s->tos++;
    s->arr[s->tos]=x;
}
int stack_pop(struct stack_a *s){
    int x;
    x=s->arr[s->tos];
    s->tos--;
    return x;
}
void show_stack_2(struct stack_a *s){
    int i;
    for(i=s->tos;i>=0;i--)
        printf("%d\n",s->arr[i]);
    printf("\n");
}
void paranthesis_count(char *str){
    char ch=*str;
    char p;
//    int i=0;
    struct stack_a st;
    st.tos=-1;
    while(ch!='\0'){
        if(ch=='('){
            stack_push(&st,ch);
        }
        else if(ch==')'){
            p=stack_pop(&st);
        }
        ch=*(++str);
    }
    if(st.tos==-1)
        printf("the string is valid\n");
    else
        printf("the string is not valid\n");
}
void infix_postfix(char *str,char *pfs){
    char ch=*str;
    char ch1[30];
    struct stack_a st;
    st.tos=-1;
    show_stack_2(&st);
    while(ch!='\0'){
        if(ch=='+'||ch=='-'||ch=='*'||ch=='/'||ch==')'||ch=='('||ch=='%'||ch=='$'){
            if(ch=='('){
                stack_push(&st,ch);
                show_stack_2(&st);
            }
            if(ch==')'){
                *ch1=stack_pop(&st);
                show_stack_2(&st);
                while(ch1!='('){
                putchar(ch1);
                putchar(ch);
                    appendpfs(pfs,ch1);
                    *ch1=stack_pop(&st);
//                    printf("%s\n",ch);
                }
            }
                if(ch=='+'||ch=='-'||ch=='*'||ch=='/'||ch=='%'||ch=='$'){
                    show_stack_2(&st);
                putchar(ch);
                    if(stack_IS_empty){
                putchar(ch);
                    stack_push(&st,ch);
                    }
                    else{
                putchar(ch);
                        *ch1=stack_pop(&st);
                putchar(ch1);
                        if(precedence_a(ch1,ch)){
                            appendpfs(pfs,ch1);
                            stack_push(&st,ch);
                        }
                        else{
                            stack_push(&st,ch1);
                            stack_push(&st,ch);
                        }
                    }
                }
        }
        else{
            appendpfs(pfs,ch1);
            show_stack_2(&st);
        }
        ch=*(++str);
    }
        while(!stack_IS_empty){
            ch=stack_pop(&st);
            append(pfs,ch);
        }
}
void evaluate_postfix(char *pfs){
    char ch=*pfs;
    struct stack_a st;
    int op2,op1,result;
    while(ch!='\0'){
        if(ch!='+'||ch!='-'||ch!='*'||ch!='/'||ch!='%'||ch!='$'){
            stack_push(&st,ch);
        }
        else{
            op2=stack_pop(&st);
            op1=stack_pop(&st);
            result=res(op1,op2,&ch);
            stack_push(&st,result);
            printf("result of the expression is %d\n",result);
        }
    }
}
int res(int op1,int op2,char *c){
    char ch=*c;
    int result;
    if(ch=='+'){
        result=op1+op2;
    }
    else if(ch=='-'){
        result=op1-op2;
    }
    else if(ch=='*'){
        result=op1*op2;
    }
    else if(ch=='/'){
        result=op1/op2;
    }
    return result;
}
int precedence_a(char *c1,char *c){
    char ch1=*c1;
    char ch=*c;
    if(ch1=='$')
        return 1;
    else if(ch1=='*'||ch1=='/'||ch1=='%'&&ch!='$')
        return 1;
    else if(ch1=='+'||ch1=='-'&&ch!='$'&&ch1!='*'&&ch1!='/'&&ch!='%')
        return 1;
    else if(ch1=='(')
        return 0;
    else
        return 0;
}
void appendpfs(char *pfs,char *c1){
    int i=0;
    while(*pfs!='\0')
        *(++pfs);
    *pfs=*c1;
    *(++pfs)='\0';


            printf("b");
//                puts(*pfs);
//    while(pfs[i]!='\0'){
//        i++;
//            printf("d");
//    }
//    pfs[i]=ch1;

            printf("e");
//    i++;
            printf("f\n");
//    pfs[i]='\0';
//    printf("%s",pfs);
//    printf("%s",ch1);
}
int main(){
    int a,b;
    char *str[79],*pfs[20];
    *pfs='\0';
    printf("Enter a string\n");
    scanf("%s",str);
    puts(str);
    paranthesis_count(str);
    infix_postfix(str,pfs);
    evaluate_postfix(pfs);
    return 0;
}
